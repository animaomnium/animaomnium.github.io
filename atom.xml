<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Crash Lime</title>
    <subtitle>Delicious performance 64 bites at a time.</subtitle>
    <link href="https://animaomnium.github.io/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://animaomnium.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-04-17T00:00:00+00:00</updated>
    <id>https://animaomnium.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Keep Stuff Linkable</title>
        <published>2023-04-17T00:00:00+00:00</published>
        <updated>2023-04-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://animaomnium.github.io/keep-stuff-linkable/" type="text/html"/>
        <id>https://animaomnium.github.io/keep-stuff-linkable/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;2023-04-18 • Revised for clarity and style, with better link queries, based on &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=35599363&quot;&gt;feedback&lt;&#x2F;a&gt; from HN. Thank you!&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You’ve spent hours reading, and a seed of an idea has germinated in your mind. You fire up your &lt;a href=&quot;https:&#x2F;&#x2F;neovim.io&quot;&gt;favorite text editor&lt;&#x2F;a&gt;, plant it down, and spend a couple hours letting the idea grow out. You’ve finished! You are about to publish your freshly-grown post on the web when you get &lt;em&gt;that sinking feeling&lt;&#x2F;em&gt; in your gut: something’s missing…&lt;&#x2F;p&gt;
&lt;p&gt;You scan over the post. Is anything wrong? Nope: argument is solid, formatting is A-Ok. But wait… what’s that?&lt;&#x2F;p&gt;
&lt;p&gt;Where are all the links?&lt;&#x2F;p&gt;
&lt;p&gt;No &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html401&#x2F;struct&#x2F;links.html&quot;&gt;links&lt;&#x2F;a&gt;, no &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;Provider&#x2F;Style&#x2F;URI&quot;&gt;game&lt;&#x2F;a&gt;. (It is the &lt;em&gt;web&lt;&#x2F;em&gt; you are publishing to, after all.) Sighing, you stumble around with &lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&quot;&gt;Google&lt;&#x2F;a&gt; for a bit before giving up. Maybe some other time. If only there were a better way…&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-links-sucks&quot;&gt;Finding links sucks&lt;&#x2F;h2&gt;
&lt;p&gt;It’s probably a lack of &lt;a href=&quot;https:&#x2F;&#x2F;www.zotero.org&quot;&gt;discipline&lt;&#x2F;a&gt;, but keeping track of the references principally responsible for each little bit of text I write is &lt;em&gt;hard&lt;&#x2F;em&gt;. I have so many linkless posts waiting to be published: I could go ahead and publish them as-is, but by doing so I feel as though I’d be treating you, dear reader, unjustly.&lt;&#x2F;p&gt;
&lt;p&gt;It’s not that I don’t know what I want to link to. Most of the posts I write are responses to things I’ve read. I know what I want to link to, but I don’t want to lose flow to hunt down a link while writing. I could go back at the end and insert links retrospectively, but it takes more time than I’d like to hop between browser, editor, and what I was thinking about at that point. It would be nice if I could mark links as I write, while still being able to refine each link in-editor as I edit and revise later.&lt;&#x2F;p&gt;
&lt;p&gt;I wish there was a faster way to link the posts I write. I want to &lt;a href=&quot;https:&#x2F;&#x2F;simonwillison.net&#x2F;2023&#x2F;Apr&#x2F;16&#x2F;web-llm&#x2F;&quot;&gt;write about things that are happening &lt;em&gt;now&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. If I wait a week to hunt down references, things will have already moved on. Writing consistently requires rhythm, and nothing interrupts a consistent rhythm more effectively than haphazardly tumbling down &lt;a href=&quot;https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Wikipedia:Unusual_articles&quot;&gt;internet rabbit-holes&lt;&#x2F;a&gt; while in search of the perfect link.&lt;&#x2F;p&gt;
&lt;p&gt;In a perfect world, I imagine a little robot reading everything alongside me. He records the references and key ideas of each piece. After I write a post, he’d comb through my post sentence by sentence, linking every important phrase to its source. Now, I haven’t quite done this, but this morning I prototyped a quick-and-dirty &lt;a href=&quot;https:&#x2F;&#x2F;terrytao.wordpress.com&#x2F;advice-on-writing-papers&#x2F;write-a-rapid-prototype-first&#x2F;&quot;&gt;first-order approximation&lt;&#x2F;a&gt;, which should hopefully let me link stuff with greater ease.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prototyping-linkoln&quot;&gt;Prototyping Linkoln&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Linkoln&lt;&#x2F;em&gt;, no pun intended, is the name of my robotic companion. It’s a short hacky &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&quot;&gt;Python&lt;&#x2F;a&gt; script I wrote this morning, which I tested against finding links for this post. It’s far from perfect, but it fills the need I had and has validated building a fuller prototype. &lt;&#x2F;p&gt;
&lt;p&gt;Linkoln parses &lt;a href=&quot;https:&#x2F;&#x2F;help.obsidian.md&#x2F;Linking+notes+and+files&#x2F;Internal+links&quot;&gt;wikilinks&lt;&#x2F;a&gt; out of a &lt;a href=&quot;https:&#x2F;&#x2F;commonmark.org&#x2F;&quot;&gt;markdown&lt;&#x2F;a&gt; document, and searches the &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;MarkUp&#x2F;html-test&#x2F;misc&#x2F;guide.html&quot;&gt;world wide web&lt;&#x2F;a&gt; to find a &lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html401&#x2F;struct&#x2F;links.html&quot;&gt;hyperlink&lt;&#x2F;a&gt; for each one. To limit the scope of this prototype, Linkoln just uses a full-web search engine. In the future, I plan to run it against my browser history, a database of articles I have saved, blogs I trust, and so on, only resorting to the public web as a last resort.&lt;&#x2F;p&gt;
&lt;p&gt;Here’s what Linkoln does, on a more concrete level. Given a Markdown post with wikilinks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;# Thoughts on Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[programming language:Rust]] is a [[systems programming language]] bootstrapped from [[rust prehistory|OCaml]].
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Linkoln normalizes the post, replacing each wikilink with the best corresponding hyperlink it could find:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;# Thoughts on Rust
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Rust][1] is a [systems programming language][2] bootstrapped from [OCaml][3].
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[1]: https:&#x2F;&#x2F;www.rust-lang.org
&lt;&#x2F;span&gt;&lt;span&gt;[2]: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;System_programming_language
&lt;&#x2F;span&gt;&lt;span&gt;[3]: https:&#x2F;&#x2F;github.com&#x2F;graydon&#x2F;rust-prehistory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Through pragmatic experimentation while writing this post, Linkoln supports three types of wikilinks:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Literal Links: &lt;code&gt;[[text]]&lt;&#x2F;code&gt; &lt;&#x2F;li&gt;
&lt;li&gt;Query Links: &lt;code&gt;[[query|text]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Context Links: &lt;code&gt;[[context:text]]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Here’s a quick breakdown of each link type:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Literal Links&lt;&#x2F;em&gt; search the given query and include the query verbatim. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[[GitHub]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searches “GitHub” and becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[GitHub][0]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[0]: https:&#x2F;&#x2F;github.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Query Links&lt;&#x2F;em&gt; let you use a different query than the text of the link. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[[notes on a smaller rust|Rust *could* be easier]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searches “notes on a smaller rust” and becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[Rust *could* be easier][0]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[0]: https:&#x2F;&#x2F;boats.gitlab.io&#x2F;blog&#x2F;posts&#x2F;notes-on-a-smaller-rust
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Context Links&lt;&#x2F;em&gt; are useful when qualifying a search for an otherwise generic term. The two halves are concatenated to form the entire query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[[wikipedia language:Python]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Searches “wikipedia language Python” and becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;[Python][0]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[0]: https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Python_(programming_language)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While the above examples link to basic popular pages, it’s not much harder to embed longer queries inline to find exactly the reference you are looking for.&lt;&#x2F;p&gt;
&lt;p&gt;I’ve been enjoying fiddling around with Linkoln. Adding a link to a post while in the middle writing only requires wrapping the revelant text with a couple of brackets. Later, as I proof-read and vet the post, I can refine queries to make sure text links to the page I intended. I can keep my link-searching activity in one place (the buffer I’m writing the article in) and let Linkoln take care of the rest.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;low-hanging-fruit&quot;&gt;Low-hanging fruit&lt;&#x2F;h2&gt;
&lt;details&gt;
&lt;summary&gt;The script itself is… pretty dumb.&lt;&#x2F;summary&gt;
&lt;p&gt;But, since you asked for it, here it is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;python3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Linkoln by Anima Omnium
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Dedicated to the Public Domain
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Just standard library for portability 
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;urllib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;request
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Input from file, output to stdout
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Suggested usage:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# python linkoln.py INPUT.md &amp;gt; OUTPUT.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Read input file name
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Usage: linkoln FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Read file
&lt;&#x2F;span&gt;&lt;span&gt;FILE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;sys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;FILE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;fin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  INPUT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;fin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Link numbering start
&lt;&#x2F;span&gt;&lt;span&gt;OFFSET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Ignore wikilinks in code, headings, frontmatter
&lt;&#x2F;span&gt;&lt;span&gt;IGNORE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;```&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;```&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;, &amp;quot;\n&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Syntax for links
&lt;&#x2F;span&gt;&lt;span&gt;LINK_OPEN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;LINK_CLOSE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;LINK_QUERY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;LINK_CONTEXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Parser state enum
&lt;&#x2F;span&gt;&lt;span&gt;S_IGNORE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;S_SCANIN &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;S_EATING &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Initialize parser
&lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;S_SCANIN
&lt;&#x2F;span&gt;&lt;span&gt;rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;INPUT
&lt;&#x2F;span&gt;&lt;span&gt;closing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;inside &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;colophon &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= []
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Skip amt chars
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;amt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;amt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Skip amt, echo what was skipped
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;amt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;amt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;amt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Check r prefix matches against
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;against&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;against&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)] == &lt;&#x2F;span&gt;&lt;span&gt;against
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Parse inside wikilink
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;extract&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = (&lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;LINK_QUERY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LINK_QUERY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;LINK_CONTEXT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LINK_CONTEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} {&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Echo formatted link
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;emit_link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span&gt;entry
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;extract&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Echo formatted link reference
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;emit_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span&gt;entry
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;extract&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  inside &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;google_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Locate link matching given query
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;google_it&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Dumbest most fragile hack ever
&lt;&#x2F;span&gt;&lt;span&gt;  quoted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;urllib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;safe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&amp;#39;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Don&amp;#39;t hammer friends at DuckDuckGo
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    contents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;urllib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;urlopen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;https:&#x2F;&#x2F;lite.duckduckgo.com&#x2F;lite&#x2F;search&amp;amp;q=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;quoted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Parsing html is easy
&lt;&#x2F;span&gt;&lt;span&gt;    top_result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;link-text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    top_link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;top_result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Leave for human to fix 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;ERROR: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;https:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;top_link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# State machine driving loop
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;!= &amp;quot;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Scanning for next link or comment 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;S_SCANIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;IGNORE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;          rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;          closing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;close
&lt;&#x2F;span&gt;&lt;span&gt;          state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;S_IGNORE
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;S_IGNORE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;LINK_OPEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LINK_OPEN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        inside &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;S_EATING
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;    rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Eating contents of wikilink
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;S_EATING&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;LINK_CLOSE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LINK_CLOSE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;colophon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span&gt;OFFSET&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;inside&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;emit_link&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;colophon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;S_SCANIN
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      inside &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;inside &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Ignoring contents of comments
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;S_IGNORE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;closing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;closing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;S_SCANIN
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      rem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;eat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Frick your computer is on fire
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;false, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Invalid state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Google all the queries
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;colophon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;emit_entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Linkoln, as rendered above, is far from perfect. In its original form, Linkoln did not search the web for links, but rather placed the query below the main text, quickly converting wikilinked markdown to a normalized reference format for later manual linking:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;This is *not* [[CommonMark-flavored:Markdown]]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;became:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;This is *not* [Markdown][0]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[0]: CommonMark-flavored Markdown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After this, I got curious and experimented with various kinds of queries, with different query types (e.g. web, reading list, history, etc.) disambiguated using standard DDG &lt;code&gt;bang!notation&lt;&#x2F;code&gt;, but decided to limit this post to web search to avoid steering the conversation into the technical weeds.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;are-links-dead&quot;&gt;Are links dead?&lt;&#x2F;h2&gt;
&lt;p&gt;At this point, it should be obvious that Linkoln is, by no means, a silver bullet. It’s not intended to be one. The point of this post is decidedly &lt;em&gt;not&lt;&#x2F;em&gt; to highlight some gimmicky throwaway python script. Instead, I hope to start a discussion on the importance of building and using tools to improve the process of writing for the web.&lt;&#x2F;p&gt;
&lt;p&gt;Despite Linkoln’s meta-ironic reliance on them, the need for web-wide search engines could be said to be a failure in the organizational structure of the web. As the proliferation of &lt;a href=&quot;https:&#x2F;&#x2F;openai.com&#x2F;research&#x2F;gpt-4&quot;&gt;GPT-4&lt;&#x2F;a&gt;-like tools (some of which can be &lt;a href=&quot;https:&#x2F;&#x2F;mlc.ai&#x2F;web-llm&#x2F;&quot;&gt;run in your browser&lt;&#x2F;a&gt;) lead to the crystallization of the &lt;a href=&quot;https:&#x2F;&#x2F;www.theatlantic.com&#x2F;technology&#x2F;archive&#x2F;2021&#x2F;08&#x2F;dead-internet-theory-wrong-but-feels-true&#x2F;619937&#x2F;&quot;&gt;Dead Internet&lt;&#x2F;a&gt;, how will we find a single live page in a soup of procedurally generated web-gloop?&lt;&#x2F;p&gt;
&lt;p&gt;Perhaps links &lt;em&gt;are&lt;&#x2F;em&gt; dead. Why link when ChatGPT can explain? Why post and upvote when &lt;a href=&quot;https:&#x2F;&#x2F;gantry.io&#x2F;blog&#x2F;papers-to-know-20230110&quot;&gt;attention-maximizing algorithms&lt;&#x2F;a&gt; can recommend? Perhaps we’re at the end of the old-web, now a corner relegated to hobbyists, as all text ever written is absorbed in a single differentiable scream.&lt;&#x2F;p&gt;
&lt;p&gt;For us hobbyists, however, perhaps links &lt;em&gt;aren’t&lt;&#x2F;em&gt; dead: they’re vitally important. Links lend authority. Trace a hop away from your homepage, maybe two: can you still trust what you read?&lt;&#x2F;p&gt;
&lt;p&gt;So in this deluge, link &lt;em&gt;more&lt;&#x2F;em&gt;, not less. Don’t link to stuff you don’t trust. Black-boxes that spit out links, like Linkoln, will only become more common in the future. With that in mind, when using a tool like Linkoln—script, chatbot, or otherwise—make sure you &lt;em&gt;thoroughly&lt;&#x2F;em&gt; vet what you’re linking to. Remember that you are not &lt;em&gt;just&lt;&#x2F;em&gt; linking, but building a &lt;em&gt;Web of Trust&lt;&#x2F;em&gt;. Links need to be a &lt;em&gt;signal&lt;&#x2F;em&gt; that cuts through the noise, not vice-versa.&lt;&#x2F;p&gt;
&lt;p&gt;Links aren’t dead. And, despite the best efforts of the &lt;a href=&quot;https:&#x2F;&#x2F;animaomnium.github.io&#x2F;incoming-content-deluge&quot;&gt;incoming &lt;em&gt;Content Deluge&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, neither is the old web. Keep the dream of an open web alive: &lt;&#x2F;p&gt;
&lt;p&gt;Keep on linking! &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Optional If Expressions</title>
        <published>2023-04-14T00:00:00+00:00</published>
        <updated>2023-04-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://animaomnium.github.io/optional-if-expressions/" type="text/html"/>
        <id>https://animaomnium.github.io/optional-if-expressions/</id>
        
        <content type="html">&lt;p&gt;A while back, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;munificentbob&quot;&gt;Robert Nystrom&lt;&#x2F;a&gt; published a post on &lt;a href=&quot;http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2023&#x2F;01&#x2F;03&#x2F;type-checking-if-expressions&#x2F;&quot;&gt;type-checking &lt;em&gt;if-expressions&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. If-expressions are generally a feature of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Expression-oriented_programming_language&quot;&gt;&lt;em&gt;expression-oriented&lt;&#x2F;em&gt; languages&lt;&#x2F;a&gt;, in which all language constructs produce a value. An if-expression takes on the value produced by the selected branch:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; Using Rust for this post
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; favorite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Best Muffin Recipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Decent Muffin Recipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because if-expressions must produce a value, an &lt;code&gt;else&lt;&#x2F;code&gt; branch is needed; because either branch could be taken, both branches must produce a value of the same type.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Imperative_programming&quot;&gt;&lt;em&gt;statement-oriented&lt;&#x2F;em&gt; languages&lt;&#x2F;a&gt;, however, it is common to write if-statements without a trailing &lt;code&gt;else&lt;&#x2F;code&gt;, because they perform a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Side_effect_(computer_science)&quot;&gt;side effect&lt;&#x2F;a&gt; rather than producing a useful value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mersenne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;pow_i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;is_prime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;mersenne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Found prime: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span&gt; mersenne&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a super-common pattern in real-world code. Quoting Nystrom:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] in imperative code, it’s obviously common to have &lt;code&gt;if&lt;&#x2F;code&gt;s whose main purpose is a side effect and where an &lt;code&gt;else&lt;&#x2F;code&gt; clause isn’t needed. In fact, when I analyzed a huge corpus of real-world Dart, I found that only about 20% of &lt;code&gt;if&lt;&#x2F;code&gt; statements had &lt;code&gt;else&lt;&#x2F;code&gt; branches.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It is possible, however, for an expression-oriented language to have if-expressions without &lt;code&gt;else&lt;&#x2F;code&gt; branches. If the &lt;code&gt;if&lt;&#x2F;code&gt; doesn’t produce a ‘value’ (e.g. produces &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unit_type&quot;&gt;Unit&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Empty_type&quot;&gt;Absurd&lt;&#x2F;a&gt;) or the value produced is never consumed, then an &lt;code&gt;else&lt;&#x2F;code&gt; branch is obviously not required.&lt;&#x2F;p&gt;
&lt;p&gt;Nystrom goes on to explain his approach for keeping track of whether the context will consume the value or not, so that it is possible to write single-branch if-expressions in non-expression contexts. (Nystrom goes a step further by relaxing the ‘same-type’ constraint in contexts where the value is not used.)&lt;&#x2F;p&gt;
&lt;p&gt;While keeping track of contexts works well in interpreted languages, there’s a simple way to adapt if-expressions so that they work in expression context:&lt;&#x2F;p&gt;
&lt;p&gt;What if single-branch if-expressions just produced an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Option_type&quot;&gt;optionally-typed&lt;&#x2F;a&gt; value? To illustrate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quotient&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;quotient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; den &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; den
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above example would be equivalent to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span&gt;quotient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; den &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; den&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pattern could be useful for &lt;a href=&quot;https:&#x2F;&#x2F;wiki.c2.com&#x2F;?LookBeforeYouLeap&quot;&gt;look-before-you-leap&lt;&#x2F;a&gt; type contexts, where a potentially fallible expression needs to check some preconditions before running.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, this feature is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.bool.html#method.then&quot;&gt;available as a method&lt;&#x2F;a&gt; on &lt;code&gt;bool&lt;&#x2F;code&gt; in Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; …
&lt;&#x2F;span&gt;&lt;span&gt;quotient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;den &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(|| &lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; den&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this works, and composes well when &lt;a href=&quot;https:&#x2F;&#x2F;dhghomon.github.io&#x2F;easy_rust&#x2F;Chapter_35.html&quot;&gt;chaining methods&lt;&#x2F;a&gt;, on its own using &lt;code&gt;then&lt;&#x2F;code&gt; in this manner is not that readable. (It suffices to say that I’m not a huge fan of passing closure callbacks a methods.)&lt;&#x2F;p&gt;
&lt;p&gt;Optional if-expressions neatly generalize the semantics of if-expressions to single-branch contexts. As a plus, the language is no longer required to differentiate between if-statements and if-expressions, because both one-armed and two-armed variants now produce a useful value.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike Nystrom’s solution, optional if-expressions do not require keeping track of expression vs. non-expression contexts. Does this mean they’re easier to implement? Not exactly. &lt;&#x2F;p&gt;
&lt;p&gt;Optional if-expressions only make sense in the context of a language with a generic &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; type, a feature that is complex, which feature Nystrom’s language does likely not have. Admittedly, this language feature makes more sense in a language with generic ADTs (like Rust) than the language Nystrom is writing.&lt;&#x2F;p&gt;
&lt;p&gt;The question, however, of how to integrate imperative, statement-oriented if-statements in an expression-oriented language, is an interesting one. Optional if-expressions are an unambiguous syntactic transformation, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Syntactic_sugar&quot;&gt;sugar&lt;&#x2F;a&gt; for a common pattern often used. While they neatly resolve a couple problems, they’re not perfect:&lt;&#x2F;p&gt;
&lt;p&gt;I’m not a huge fan of the implicit introduction of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Option_type&quot;&gt;Option&lt;&#x2F;a&gt; type. In a language like Rust, implicitly introducing &lt;code&gt;Option&lt;&#x2F;code&gt; is &lt;em&gt;barely&lt;&#x2F;em&gt; acceptable: &lt;code&gt;Option&lt;&#x2F;code&gt; is already a priveleged type, and ‘accidentally’ assigning such an optional if-expression to a variable will likely cause a type mismatch error, caught by the compiler.&lt;&#x2F;p&gt;
&lt;p&gt;In a dynamically-typed language with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nullable_type&quot;&gt;nullable values&lt;&#x2F;a&gt;, the idea of &lt;em&gt;nullable&lt;&#x2F;em&gt; if-expressions is a terrible one. Normally, we have to check for null values before performing an action. A nullable if-expression performs this check, but discards the result. The difference between optional and nullable if-expressions is the same as the difference between &lt;a href=&quot;https:&#x2F;&#x2F;lexi-lambda.github.io&#x2F;blog&#x2F;2019&#x2F;11&#x2F;05&#x2F;parse-don-t-validate&#x2F;&quot;&gt;parsing and validating&lt;&#x2F;a&gt;. Optional if-expressions reify the check, producing a wrapped value; nullable if-expressions do no such thing.&lt;&#x2F;p&gt;
&lt;p&gt;Taking a step back, in all honesty, I’m not a huge fan of if-expressions and, well, &lt;a href=&quot;https:&#x2F;&#x2F;wiki.c2.com&#x2F;?UseEnumsNotBooleans&quot;&gt;booleans&lt;&#x2F;a&gt; in general. In the long run, I think that &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pattern_matching&quot;&gt;pattern-matching&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Algebraic_data_type&quot;&gt;structured data&lt;&#x2F;a&gt; is a much cleaner and less &lt;a href=&quot;https:&#x2F;&#x2F;tuacm.com&#x2F;blog&#x2F;switch-statements-wont-fix-yandere-simulator&#x2F;&quot;&gt;error-prone&lt;&#x2F;a&gt; route. The issue of &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;7m7rn8&#x2F;avoiding_deeply_nested_matchstructures&#x2F;&quot;&gt;deeply-nested pattern-matching&lt;&#x2F;a&gt; can be resolved with a little sugar (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;do_notation&quot;&gt;&lt;code&gt;do&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;koka-lang.github.io&#x2F;koka&#x2F;doc&#x2F;book.html#sec-with&quot;&gt;&lt;code&gt;with&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;gleam.run&#x2F;news&#x2F;v0.25-introducing-use-expressions&#x2F;&quot;&gt;&lt;code&gt;use&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; notation in &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;&quot;&gt;Haskell&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;koka-lang.github.io&#x2F;&quot;&gt;Koka&lt;&#x2F;a&gt;&#x2F;&lt;a href=&quot;https:&#x2F;&#x2F;gleam.run&#x2F;&quot;&gt;Gleam&lt;&#x2F;a&gt;): there’s no reason not to &lt;code&gt;match&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;But until then, let’s at least make the if-expressions we have now a little nicer! &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Incoming Content Deluge</title>
        <published>2023-03-12T00:00:00+00:00</published>
        <updated>2023-03-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://animaomnium.github.io/incoming-content-deluge/" type="text/html"/>
        <id>https://animaomnium.github.io/incoming-content-deluge/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;What happens when the cost of content generation drops to zero?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-dawn-of-gpt&quot;&gt;The dawn of GPT&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;And the long road to LLaMA.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There was a time when OpenAI had a reputation for being &lt;em&gt;open&lt;&#x2F;em&gt;. Indeed, the vast majority of OpenAI’s work was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;gym&quot;&gt;open-sourced&lt;&#x2F;a&gt;: It wasn’t always the &lt;em&gt;ClosedAPI&lt;&#x2F;em&gt; it is today.&lt;&#x2F;p&gt;
&lt;p&gt;It was surprising, then, that GPT-2 was not released to the public when announced. OpenAI leaned heavily into the trust they had accumulated, and reassured the general public that delaying release was indeed a necessary-yet-unfortunate step, all in the name of &lt;a href=&quot;https:&#x2F;&#x2F;www.scu.edu&#x2F;ethics&#x2F;focus-areas&#x2F;technology-ethics&#x2F;resources&#x2F;open-source-ai-to-release-or-not-to-release-the-gpt-2-synthetic-text-generator&#x2F;&quot;&gt;safety&lt;&#x2F;a&gt;. GPT-2 marked a turning point in OpenAI’s &lt;em&gt;modus operandi&lt;&#x2F;em&gt;, but this post is about LLMs; let’s leave OpenAI for another time.&lt;&#x2F;p&gt;
&lt;p&gt;Jump to March of 2023. Since GPT-2, language models have gone from bumbling drunk librarians to prodigal writers whose only flaw, perhaps, is a lack of grounding in reality. GPT-3 has shown that OpenAI’s initial safety concerns haven’t stopped them from pursuing further development (and &lt;a href=&quot;https:&#x2F;&#x2F;openai.com&#x2F;blog&#x2F;openai-lp&#x2F;&quot;&gt;profit&lt;&#x2F;a&gt;) in the space.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-race-to-scale&quot;&gt;The race to scale&lt;&#x2F;h2&gt;
&lt;p&gt;At risk of repeating an explanation that has been given a thousand times, &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2005.14165&quot;&gt;GPT&lt;&#x2F;a&gt; stands for &lt;em&gt;General Procedural Transformer&lt;&#x2F;em&gt;. “Transformer” is the key word here: a &lt;em&gt;Transformer&lt;&#x2F;em&gt; is a type of &lt;a href=&quot;https:&#x2F;&#x2F;deepgenerativemodels.github.io&#x2F;notes&#x2F;autoregressive&quot;&gt;autoregressive&lt;&#x2F;a&gt; model trained on sequence prediction. The key innovation of the Transformer is the introduction of &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1706.03762&quot;&gt;multi-headed attention&lt;&#x2F;a&gt;, which architecture is the first to practically capture the rich causal dependencies commonly found when modeling text. Long story short, Transformers are really good at generating text, or anything else that can be flattened into a 1D sequence.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;a href=&quot;http:&#x2F;&#x2F;www.incompleteideas.net&#x2F;IncIdeas&#x2F;BitterLesson.html&quot;&gt;race to scale models&lt;&#x2F;a&gt; had begun: it was thought that the more parameters, the better performance. Transformers have horrible quadratic scaling properties with respect to the size of the attention window, so much research was performed to deliver ever-larger models. In the end, though, we found that under the current paradigm it was not the sheer &lt;em&gt;scale&lt;&#x2F;em&gt; of the model that has the largest effect on model performance, but rather the volume of &lt;em&gt;data&lt;&#x2F;em&gt; pushed through the model while training.&lt;&#x2F;p&gt;
&lt;p&gt;With the release of Google’s &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2203.15556&quot;&gt;Chinchilla&lt;&#x2F;a&gt;, the unknown relationship between model size, data, and performance was finally pinned down. Chinchilla proved, against the prevailing wisdom of the time, that better models needed more &lt;em&gt;data&lt;&#x2F;em&gt;, not more &lt;em&gt;parameters&lt;&#x2F;em&gt;. Collecting high-quality data is vastly more difficult than merely turning up the parameter knob. More data-efficient architectures were needed:&lt;&#x2F;p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https:&#x2F;&#x2F;ai.facebook.com&#x2F;blog&#x2F;large-language-model-llama-meta-ai&#x2F;&quot;&gt;LLaMA&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;llama-runs-locally&quot;&gt;LLaMA runs locally&lt;&#x2F;h2&gt;
&lt;p&gt;LLaMA (Large Language Model Meta AI) is a set of &lt;a href=&quot;https:&#x2F;&#x2F;hai.stanford.edu&#x2F;news&#x2F;reflections-foundation-models&quot;&gt;foundation models&lt;&#x2F;a&gt; released by Facebook AI Research (FAIR). LLaMA is the first language model with performance “similar” to GPT-3 small enough to &lt;em&gt;run locally&lt;&#x2F;em&gt;. Although FAIR originally planned a limited rollout to trusted organizations and researchers, in an ironic twist of fate, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;llama&#x2F;pull&#x2F;73&quot;&gt;model parameters were leaked&lt;&#x2F;a&gt;, and the cat is now out of the bag.&lt;&#x2F;p&gt;
&lt;p&gt;Georgi Gerganov (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggerganov&quot;&gt;ggerganov&lt;&#x2F;a&gt;) has a reputation for packaging up released models so that they can be run by anyone possessing free time and a little grit. When the weights for &lt;a href=&quot;https:&#x2F;&#x2F;openai.com&#x2F;research&#x2F;whisper&quot;&gt;Whisper&lt;&#x2F;a&gt; (OpenAI’s speech transcription AI) were released, ggerganov developed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;whisper.cpp&quot;&gt;whisper.cpp&lt;&#x2F;a&gt;, a self-contained program allowing anyone to run the model locally. With the release of LLaMA, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;llama.cpp&quot;&gt;ggernov&#x2F;llama.cpp&lt;&#x2F;a&gt; followed shortly thereafter. Now anyone with access to a decent GPU or M1 Macbook can run LLaMA locally.&lt;&#x2F;p&gt;
&lt;p&gt;Willison, in his post &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;simonwillison.net&#x2F;2023&#x2F;Mar&#x2F;11&#x2F;llama&#x2F;&quot;&gt;LLMs are having a Stable Diffusion Moment&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;, aptly comments that running LLaMA locally is more of a proof-of-concept than anything else. He was, however, able to get the 13B parameter model, with performance similar to GPT-3, running on his machine. With much faith in EleutherAI &lt;em&gt;et al.&lt;&#x2F;em&gt; (flagbearers of open AI since OpenAI’s departure), I have no doubt that LLaMA will soon be replicated and improved upon in an unceasing viral cycle, much after the pattern of Stable Diffusion before it.&lt;&#x2F;p&gt;
&lt;p&gt;A little at first, then all at once, Pandora’s box is now open. What happens when anyone can run a LLM on their laptop? On their &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;rgerganov&#x2F;status&#x2F;1635604465603473408&quot;&gt;phone&lt;&#x2F;a&gt;? This is what keeps me up at night.&lt;&#x2F;p&gt;
&lt;p&gt;With this oversized introduction out of the way, let’s address the implications of the original question:&lt;&#x2F;p&gt;
&lt;p&gt;What happens when the cost of content generation drops to zero?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-llama-for-everything&quot;&gt;A LLaMA for everything&lt;&#x2F;h2&gt;
&lt;p&gt;First, I should clarify that by “content,” I mean a lot more than just Text (LLaMA) and Images (Stable Diffusion). It would be silly to believe that there’s &lt;em&gt;not&lt;&#x2F;em&gt; a team of researchers at Google scraping YouTube trying to do the same for video. How long until GitHub releases &lt;em&gt;CodeMonkey&lt;&#x2F;em&gt;, “a one-click solution for turning issues into PRs”? We don’t know, but probably &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;preview&#x2F;copilot-x&quot;&gt;sooner&lt;&#x2F;a&gt; than anyone expects.&lt;&#x2F;p&gt;
&lt;p&gt;The unique innovation of models like LLaMA and Stable Diffusion is that they run on commodity hardware. Programs have close to zero-marginal cost to be copied: indeed, anything that can run on commodity hardware will eventually be provided as a free service to the average user. When there’s “a LLaMA for everything”, there will be no limit to the types of experiences people are able to generate at little-to-no cost to themselves. Content becomes a post-scarcity good.&lt;&#x2F;p&gt;
&lt;p&gt;The central hypothesis of this post, containing the points most amenable to discussion, is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Individuals are able to shape the &lt;em&gt;realities&lt;&#x2F;em&gt; they inhabit through &lt;em&gt;experiences&lt;&#x2F;em&gt; derived from the &lt;em&gt;content&lt;&#x2F;em&gt; they consume. When content is &lt;em&gt;scarce&lt;&#x2F;em&gt;, individuals share similar experiences, and inhabit similar realities. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;As the cost of content generation drops towards zero, content becomes a &lt;em&gt;post-scarcity&lt;&#x2F;em&gt; good, which may be tailored to each individual’s taste. When content is post-scarce, the &lt;em&gt;breadth&lt;&#x2F;em&gt; of experience increases, as does the &lt;em&gt;diversity&lt;&#x2F;em&gt; of the realities each individual may inhabit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When individuals share little overlap in &lt;em&gt;reality&lt;&#x2F;em&gt;, clear communication breaks down. This &lt;em&gt;fraying of reality&lt;&#x2F;em&gt;, so to speak, will make it much easier for individuals to believe false-yet-self-coherent narratives and feed infohazard-based addictions. This has been a long-time coming; Indeed, it is already happening today.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Let’s break this argument down, one point at a time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;experience-defines-reality&quot;&gt;Experience defines reality&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start by breaking down the first point:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. Individuals are able to shape the &lt;em&gt;realities&lt;&#x2F;em&gt; they inhabit through &lt;em&gt;experiences&lt;&#x2F;em&gt; derived from the &lt;em&gt;content&lt;&#x2F;em&gt; they consume.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It’s first important to establish that the experiences people have define the &lt;em&gt;reality&lt;&#x2F;em&gt; they inhabit. In this context, I’m defining the word “reality” to describe, abstractly, the way an individual “makes sense of the world”, or concretely, “the set of beliefs people hold against their subjective experiences”. People with overlapping beliefs inhabit overlapping realities; it is only within this overlap that ideas can be clearly transmitted, but more on that later.&lt;&#x2F;p&gt;
&lt;p&gt;We can’t help but process new experiences through the lens of old ones. It is only when we encounter a new experience that &lt;em&gt;does not&lt;&#x2F;em&gt; match our existing reality that we reweigh the set of beliefs we hold. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When content is &lt;em&gt;scarce&lt;&#x2F;em&gt;, individuals share similar experiences, and inhabit similar realities. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Increasingly, for better or (likely) worse, more and more of the experiences we have happen online. Most people can navigate their desktop or homescreen about as well as they can navigate their own home. In terms of the mental energy used to maintain them, digital places are not any less &lt;em&gt;real&lt;&#x2F;em&gt; (using the above definition of &lt;em&gt;reality&lt;&#x2F;em&gt;) than the physical spaces we inhabit.&lt;&#x2F;p&gt;
&lt;p&gt;Digital experiences generally revolve around the production or consumption of &lt;em&gt;content&lt;&#x2F;em&gt;. Pre-GPT, there was a natural limit to how much digital content any one individual could produce. People, unlike tensors, can not be sliced up and run in parallel. What happens when any experience is an API call away?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;content-post-scarcity&quot;&gt;Content post-scarcity&lt;&#x2F;h2&gt;
&lt;p&gt;A few years ago, Tim Urban published a &lt;a href=&quot;https:&#x2F;&#x2F;waitbutwhy.com&#x2F;2015&#x2F;01&#x2F;artificial-intelligence-revolution-1.html&quot;&gt;popular post on AGI and the future&lt;&#x2F;a&gt;. In his post, there’s a graph showing &lt;em&gt;super-exponential growth&lt;&#x2F;em&gt;: the curve remains basically flat, until it goes &lt;em&gt;straight vertical&lt;&#x2F;em&gt;. There’s a stick figure standing on the flat part of the curve, just before it goes vertical, seemingly unaware. “Seems like a pretty intense place to be standing”, right?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;2. As the cost of content generation drops towards zero, content becomes a &lt;em&gt;post-scarcity&lt;&#x2F;em&gt; good, which may be tailored to each individual’s taste.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Although Urban was using this graph to denote runaway human progress in the context of self-improving AI, by adopting a lens more appropriate for this article, this curve could be said to represent “the amount of content reachable by an individual on the internet over time”. We’re still standing on flat ground for now. Yet a few years from now, someone will look back at us and quip, “2023, eh? Seems like a pretty intense place to be standing.”&lt;&#x2F;p&gt;
&lt;p&gt;We are standing at the edge of a &lt;em&gt;Cambrian Explosion&lt;&#x2F;em&gt; with respect to the depth and breadth of the type of content people are able to create and consume. Three years ago, had you told me that it took &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;andys.page&#x2F;posts&#x2F;how-to-draw&#x2F;&quot;&gt;4.2 Gigabytes to Draw Anything&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;, I would have laughed and asked you to clarify. Now, when people &lt;a href=&quot;https:&#x2F;&#x2F;research.nvidia.com&#x2F;labs&#x2F;toronto-ai&#x2F;VideoLDM&#x2F;&quot;&gt;flirt&lt;&#x2F;a&gt; with the eventual reality of, say, procedurally generated Netflix, I laugh a little more nervously.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When content is post-scarce, the &lt;em&gt;breadth&lt;&#x2F;em&gt; of experience increases, as does the &lt;em&gt;diversity&lt;&#x2F;em&gt; of the realities each individual may inhabit.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When content becomes a post-scarcity good, anything you can imagine can become your reality. This future, if true, is as terrifying as it sounds. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-fraying-of-reality&quot;&gt;The fraying of reality&lt;&#x2F;h2&gt;
&lt;p&gt;You’ve finally reached the section with the scary title. It’s not as bad as it sounds.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;3. When individuals share little overlap in &lt;em&gt;reality&lt;&#x2F;em&gt;, clear communication breaks down.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;People with overlapping beliefs have shared vocabulary of experiences: they inhabit similar realities because the lenses they use to process new experiences are mostly the same. In the absence of shared lenses, however, one’s perceptions of events become distorted relative to another’s. Without a shared vocabulary of experiences, it’s not always easy to communicate what you intend to convey. Quite simply, communication breaks down when people use the same words to mean different things. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This &lt;em&gt;fraying of reality&lt;&#x2F;em&gt;, so to speak, will make it much easier for individuals to believe false-yet-self-coherent narratives and feed infohazard-based addictions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Because communication breaks down in the presence of misaligned vocabularies, it is only within the overlap of realities that ideas can be transmitted while maintaining their original form. When anyone can generate anything they’d like to experience &lt;em&gt;on demand&lt;&#x2F;em&gt;, there exists a risk of people “becoming lost in their own realities”. We will be left with a so-called &lt;em&gt;Milquetoast Culture&lt;&#x2F;em&gt;: The shared plains of collective consciousness ravaged by a sea of memetic tofu, each thought allocated to the highest bidder.&lt;&#x2F;p&gt;
&lt;p&gt;Those who do not fall prey to the infohazards left to roam freely will have carved out their own protective bubbles. Within such a bubble, it will be easy for one to reinforce their existing interpretation of reality. When any argument against a given belief can be instantly countered with an essay, an infographic, or an automatically-generated award-winning documentary film, where does that leave us?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This fraying of reality has been a long-time coming. Indeed, it is already happening today.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;On YouTube alone, more video is uploaded in an day than a human could possibly consume in their entire lifetime. A lot of this content, however, is subjectively garbage: how do we filter through the noise to find a diamond in the rough?&lt;&#x2F;p&gt;
&lt;p&gt;By grouping people by their interests, we can amplify any diamonds found. Indeed, people are &lt;em&gt;already&lt;&#x2F;em&gt; grouped by their interests, whether by algorithm or self-sortedly. &lt;&#x2F;p&gt;
&lt;p&gt;As we read and write to shared communities, we develop a shared vocabulary, and use that vocabulary to make sense of the universe. To an outsider, this shared vocabulary may be nonsensical at best, or easily misinterpretable at worst.&lt;&#x2F;p&gt;
&lt;p&gt;We have already seen countless breakdowns in communication between communities with different vocabularies for the same terms. Perhaps this is most apparent in the political sphere, which (cynically-speaking) has always been about shaping interpretations of reality through the clever use of words. We need to be more flexible when adopting another’s viewpoint: we need to criticize our own ideas to see where they break down, and avoid getting defensive when others do the same. There will be people who disagree with this post, and this is my hope: the future this post portrays is bleak, and I could not be happier to be wrong. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;picking-up-the-pieces&quot;&gt;Picking up the pieces&lt;&#x2F;h2&gt;
&lt;p&gt;So where does that leave us?&lt;&#x2F;p&gt;
&lt;p&gt;Frankly, I remain cautiously optimistic. The technology for a true &lt;em&gt;Content Deluge&lt;&#x2F;em&gt; is not quite here yet. In the meantime, I believe the &lt;em&gt;capacity&lt;&#x2F;em&gt; needed to develop the tools it will take to moderate the incoming deluge exists. Moderation has always been a hard problem, but increasing outside pressure is only going to make the existing systems we have to moderate content more resilient. &lt;&#x2F;p&gt;
&lt;p&gt;Unlike GPT, as people, we all share the reality of &lt;em&gt;human experience&lt;&#x2F;em&gt;. This is a reality that can’t be generated: it is a vocabulary we all share. I hope that the fundamental human need for &lt;em&gt;real&lt;&#x2F;em&gt; social connection—outside of the hollow digital realities we define—will drive people to seek more real-world friendships than the number of digital ones they prompt into existence. When they do, I hope that these friends look to expand the overlap between their respective vocabularies, working towards bridging the gap between their shared realities.&lt;&#x2F;p&gt;
&lt;p&gt;This argument presented in this post has at least one fatal flaw (among many): it assumes that the path of “getting lost in a private fractured reality” is the path most people will elect to follow. In practice, however, I think the novelty will soon wear off: most people will get sick of said &lt;em&gt;Content Deluge&lt;&#x2F;em&gt; after a while. There are only so many procedurally generated landscapes the eyes can handle before the body wants to step away and experience &lt;em&gt;real&lt;&#x2F;em&gt; nature. The curse of those forced to inhabit a fractured reality will likely be relegated to those who consider themselves members of the &lt;em&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.palladiummag.com&#x2F;2022&#x2F;11&#x2F;04&#x2F;i-do-not-want-to-be-an-internet-person&#x2F;&quot;&gt;Eternally Online&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;. I am grateful to not be counted among their ranks.&lt;&#x2F;p&gt;
&lt;p&gt;With that in mind, as you reach the end of this post, now might be a good time to stretch, take a break, and go outside.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What Austral Proves</title>
        <published>2023-02-15T00:00:00+00:00</published>
        <updated>2023-02-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://animaomnium.github.io/what-austral-proves/" type="text/html"/>
        <id>https://animaomnium.github.io/what-austral-proves/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;austral-lang.org&quot;&gt;Austral&lt;&#x2F;a&gt; is a novel systems programming language designed by &lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&quot;&gt;Fernando Borretti&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can think of it as &lt;em&gt;Rust: The Good Parts&lt;&#x2F;em&gt; or a modernized, stripped-down Ada. It features a strong static type system, linear types, capability-based security, and strong modularity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I’ve been thinking a lot about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;austral&#x2F;austral&quot;&gt;Austral&lt;&#x2F;a&gt; recently. It bundles a lot of the right features together in one place.&lt;&#x2F;p&gt;
&lt;p&gt;Austral is designed for safety-critical systems software. Austral has the philosophy that, if a programmer looks at some code, they should be able to say exactly what it does, down to the functions it calls and the assembly it emits. This goal has informed a number of design decisions: the language is unambiguous, uses linear types to model resources, and library permissions are constrained using capabilities. It wouldn’t be a stretch to say that Austral is a language Dijkstra would love: it guides you towards writing &lt;a href=&quot;https:&#x2F;&#x2F;www.cs.utexas.edu&#x2F;~EWD&#x2F;transcriptions&#x2F;EWD01xx&#x2F;EWD117.html&quot;&gt;perfect programs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Austral is a simple language. Like &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;&quot;&gt;Go&lt;&#x2F;a&gt;, it is designed to be small enough to fit in the mind of a single programmer. The language has a compact 100-page &lt;a href=&quot;https:&#x2F;&#x2F;austral-lang.org&#x2F;spec&#x2F;spec.html&quot;&gt;specification&lt;&#x2F;a&gt;; it’s &lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&#x2F;article&#x2F;simplicity-and-survival&quot;&gt;not a big language&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A central constraint in the design of Austral is the language should be easy to implement. Not just because I was the only person writing the compiler, but because I want Austral to be a hundred year language, where you can reliably run code from decades ago (Common Lisp is like this: it is possible). If, for whatever reason, the source code of the bootstrapping compiler was lost, it would be trivial to rewrite it again from the ~100 pages of spec (roughly half of which describes the rationale for various design decisions).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;To help you cobble together a rough picture of Austral, I’ll say it has a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ada_(programming_language)&quot;&gt;Ada&lt;&#x2F;a&gt;-like syntax with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;rust&quot;&gt;Rust&lt;&#x2F;a&gt;-like semantics. Like &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-02-traits.html&quot;&gt;Rust&lt;&#x2F;a&gt;, it has &lt;a href=&quot;https:&#x2F;&#x2F;austral-lang.org&#x2F;tutorial&#x2F;modules&quot;&gt;traits&lt;&#x2F;a&gt; (typeclasses) for modeling interfaces. Austral also leverages the type system to model &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Resource_management_(computing)&quot;&gt;resources&lt;&#x2F;a&gt;, which it does through the use of &lt;a href=&quot;https:&#x2F;&#x2F;wiki.c2.com&#x2F;LinearTypes&quot;&gt;Linear Types&lt;&#x2F;a&gt;. (Rust uses &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Substructural_type_system#Affine_type_systems&quot;&gt;Affine Types&lt;&#x2F;a&gt;, which are similar, but a little less restrictive.)&lt;&#x2F;p&gt;
&lt;p&gt;Austral divides values into two type &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universe_(mathematics)&quot;&gt;Universes&lt;&#x2F;a&gt;: &lt;em&gt;free&lt;&#x2F;em&gt; values, which are small and can be copied freely, and &lt;em&gt;linear&lt;&#x2F;em&gt; values, which must be used &lt;em&gt;exactly&lt;&#x2F;em&gt; once. This constraint ensures that there is one—and only one—handle to a linear value at any given point in the program.&lt;&#x2F;p&gt;
&lt;p&gt;Austral’s power to model resources stems from its Linear type system. Most data—like bools, ints, and small structs—can be modeled using normal free values. Resources—like &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memory_management&quot;&gt;memory&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;File_descriptor&quot;&gt;file descriptors&lt;&#x2F;a&gt;, and database connections—are modeled as &lt;em&gt;linear values&lt;&#x2F;em&gt;. Linear values use the type system to statically ensure that there is only one handle to a resource at any given point in the program. Modeling resources is essential in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Systems_programming&quot;&gt;systems programming&lt;&#x2F;a&gt;, and Austral, like Rust, will catch &lt;a href=&quot;https:&#x2F;&#x2F;www.nsa.gov&#x2F;Press-Room&#x2F;News-Highlights&#x2F;Article&#x2F;Article&#x2F;3215760&#x2F;nsa-releases-guidance-on-how-to-protect-against-software-memory-safety-issues&#x2F;&quot;&gt;memory-safety&lt;&#x2F;a&gt; bugs (and other similar classes of errors) at compile-time.&lt;&#x2F;p&gt;
&lt;p&gt;Austral includes a few innovations over Rust, such as a novel &lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&#x2F;article&#x2F;how-australs-linear-type-checker-works#borrow-long&quot;&gt;&lt;em&gt;borrow&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; syntax for annotating regional lifetimes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#212121;color:#eeffff;&quot;&gt;&lt;code&gt;&lt;span&gt;let x: Lin := make();
&lt;&#x2F;span&gt;&lt;span&gt;borrow x as ref in R do
&lt;&#x2F;span&gt;&lt;span&gt;   -- Here, we can refer to the region by
&lt;&#x2F;span&gt;&lt;span&gt;   -- its name, `R`.
&lt;&#x2F;span&gt;&lt;span&gt;   let ref2: &amp;amp;[T, R] := transform(ref);
&lt;&#x2F;span&gt;&lt;span&gt;end;
&lt;&#x2F;span&gt;&lt;span&gt;consume(x);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By design of being a simpler language, however, Austral is a bit more restrictive than Rust in a few areas. The largest restrictions that come to mind are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Linear Types require explicit &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Destructor_(computer_programming)&quot;&gt;destructors&lt;&#x2F;a&gt; to clean up resources, because all values must be used &lt;em&gt;exactly&lt;&#x2F;em&gt; once. This can get a little verbose. Rust uses Affine Types (values must be used &lt;em&gt;at most&lt;&#x2F;em&gt; once), meaning that resources are cleaned up automatically according to Rust’s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;drop-flags.html&quot;&gt;Drop&lt;&#x2F;a&gt; semantics.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Austral uses &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;50251487&#x2F;what-are-non-lexical-lifetimes&quot;&gt;lexical regions&lt;&#x2F;a&gt; to model &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object_lifetime&quot;&gt;lifetimes&lt;&#x2F;a&gt;, meaning that the lifetimes of values are processed at the lexical, i.e. block, level. Rust uses fine-grained non-lexical lifetimes, meaning there are some valid programs that Rust permits but Austral disallows.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Austral, like Rust, uses a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;1.8.0&#x2F;book&#x2F;references-and-borrowing.html&quot;&gt;borrow checker&lt;&#x2F;a&gt;. As borrow checkers tie resources to the stack, and stacks map to the &lt;a href=&quot;https:&#x2F;&#x2F;en.m.wikibooks.org&#x2F;wiki&#x2F;Haskell&#x2F;Zippers#Differentiation_of_data_types&quot;&gt;one-hole context&lt;&#x2F;a&gt; of cycle-free &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inductive_type&quot;&gt;inductive datatypes&lt;&#x2F;a&gt;, it is impossible to express data structures that &lt;em&gt;contain cycles&lt;&#x2F;em&gt; in Rust or Austral. (Without an escape-hatch like &lt;em&gt;unsafe&lt;&#x2F;em&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fundamental_theorem_of_software_engineering&quot;&gt;another level of indirection&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It’s important to note that these restrictions are purposeful: Requiring explicit resource cleanup ensures that the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;destructors.html&quot;&gt;drop-order&lt;&#x2F;a&gt; is well-defined, and that there is no invisible performance impact due to automatically-inserted drop calls; lexical regions keep the compiler implementation, and thus the language itself, small and easy to reason about; and if you’re reaching for cyclic data at the application-level, you’re probably looking to model &lt;a href=&quot;https:&#x2F;&#x2F;www.cell-lang.net&#x2F;relations.html&quot;&gt;relations&lt;&#x2F;a&gt;, in which case just use (a linear handle to) a relational database.&lt;&#x2F;p&gt;
&lt;p&gt;Borretti has said that these restrictions exist to keep the language &lt;em&gt;simple&lt;&#x2F;em&gt;. By any metric, I’d say he’s succeeded. Heck, the linear type inference engine at the core of the language is only &lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&#x2F;article&#x2F;how-australs-linear-type-checker-works&quot;&gt;600 lines long&lt;&#x2F;a&gt;. No, seriously, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;austral&#x2F;austral&#x2F;blob&#x2F;master&#x2F;lib&#x2F;LinearityCheck.ml&quot;&gt;take a look&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Rust, on the other hand, is a huge, &lt;a href=&quot;https:&#x2F;&#x2F;vorner.github.io&#x2F;difficult.html&quot;&gt;complex&lt;&#x2F;a&gt; language. In my mind, I pinned a lot of this complexity on Rust’s borrow checker and type system. Having worked with Rust for a while, I’d argue that a good amount of this complexity is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;No_Silver_Bullet&quot;&gt;accidental&lt;&#x2F;a&gt;: when Rust took its first steps, no mainstream language sported a borrow-checker. The &lt;a href=&quot;https:&#x2F;&#x2F;www.sebastiansylvan.com&#x2F;post&#x2F;why-most-high-level-languages-are-slow&#x2F;&quot;&gt;dichotomy&lt;&#x2F;a&gt; for any new language at the time was &lt;em&gt;slow-but-memory-safe&lt;&#x2F;em&gt; or &lt;em&gt;fast-but-footgunned&lt;&#x2F;em&gt;. Rust proved this dichotomy false, but getting to that point wasn’t an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;graydon&#x2F;rust-prehistory&quot;&gt;easy road&lt;&#x2F;a&gt;. (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;polonius&quot;&gt;Polonius&lt;&#x2F;a&gt;, anyone?)&lt;&#x2F;p&gt;
&lt;p&gt;While more restrictive than Rust, Austral, with its 600-line linear-type borrow-checker, proves that implementing compiler-enforced resource safety isn’t as hard as it once was; with the benefit of hindsight, we can avoid some of the accidental complexity originally thought necessary. &lt;&#x2F;p&gt;
&lt;p&gt;If you can express linear types in less code than a garbage collector, why not just use linear types to manage memory? A lot of impractical theoretical groundwork laid in decades past is finally becoming tractable and workable. We’re in a &lt;a href=&quot;https:&#x2F;&#x2F;devpoga.org&#x2F;post&#x2F;2019-11-03-golden-age-of-programming-language&#x2F;&quot;&gt;golden era&lt;&#x2F;a&gt; of programming language research. &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&quot;&gt;LLVM&lt;&#x2F;a&gt;, the &lt;a href=&quot;https:&#x2F;&#x2F;langserver.org&#x2F;&quot;&gt;Language Server Protocol&lt;&#x2F;a&gt;, better &lt;a href=&quot;https:&#x2F;&#x2F;craftinginterpreters.com&#x2F;&quot;&gt;resources&lt;&#x2F;a&gt;, and bigger &lt;a href=&quot;https:&#x2F;&#x2F;proglangdesign.net&quot;&gt;communities&lt;&#x2F;a&gt; have turned designing a new compiler from a PhD thesis to a weekend project. There’s no excuse to ignore recent innovations. Linear types in 600 lines of code is quite the accomplishment, but it’s indicative of a larger trend.&lt;&#x2F;p&gt;
&lt;p&gt;I think we’re finally starting to get a handle on software engineering as a discipline. Gone are the wild-west days of PHP and CGI, shotgun debugging and panic deploys. Linear types, capabilities, algebraic effects, and program verification are old tools—finally becoming tractable—that let us understand, limit, and shape a program’s behavior, as Software &lt;em&gt;Engineers&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Dijkstra grew disillusioned with Computing Science as a discipline: the tools simply weren’t there yet. Austral proves that this is no longer the case. The tools are on the table, what to build from here?&lt;&#x2F;p&gt;
&lt;p&gt;It’s too early to say what will happen with Austral in the long-run, but in the least it has been designed for longevity. Like Rust before it, Austral started with a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bootstrapping_(compilers)&quot;&gt;bootstrapping compiler&lt;&#x2F;a&gt; written in &lt;a href=&quot;https:&#x2F;&#x2F;ocaml.org&#x2F;&quot;&gt;OCaml&lt;&#x2F;a&gt;; it seems that the goal is now to write out a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Self-hosting_(compilers)&quot;&gt;self-hosting&lt;&#x2F;a&gt; compiler in Austral itself. I hope the language finds its &lt;a href=&quot;https:&#x2F;&#x2F;ano.ee&#x2F;blog&#x2F;the-niche-programmer&quot;&gt;niche&lt;&#x2F;a&gt; (safety-critical embedded?) and quickly grows to do much more.&lt;&#x2F;p&gt;
&lt;p&gt;There will be some growing pains. At some point, as Rust discovered, the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2094-nll.html&quot;&gt;restrictions&lt;&#x2F;a&gt; imposed by lexical regions will have to be re-evaluated. The package ecosystem is nascent, so while I wouldn’t quite build your next company in the language, it might be fun (and useful!) to port over a little low-level library. (Forget &lt;a href=&quot;https:&#x2F;&#x2F;enet4.github.io&#x2F;rust-tropes&#x2F;#rewrite-in-rust&quot;&gt;Rust&lt;&#x2F;a&gt;, Rewrite it in Austral!)&lt;&#x2F;p&gt;
&lt;p&gt;To recap: &lt;a href=&quot;https:&#x2F;&#x2F;austral-lang.org&quot;&gt;Austral&lt;&#x2F;a&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Systems_programming&quot;&gt;systems programming language&lt;&#x2F;a&gt; that uses &lt;a href=&quot;https:&#x2F;&#x2F;wiki.c2.com&#x2F;LinearTypes&quot;&gt;linear types&lt;&#x2F;a&gt; to model &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Resource_management_(computing)&quot;&gt;resources&lt;&#x2F;a&gt;. It’s &lt;a href=&quot;https:&#x2F;&#x2F;austral-lang.org&#x2F;spec&#x2F;spec.html&quot;&gt;small&lt;&#x2F;a&gt;, and is working proof that borrow checkers need &lt;a href=&quot;https:&#x2F;&#x2F;borretti.me&#x2F;article&#x2F;how-australs-linear-type-checker-works&quot;&gt;not&lt;&#x2F;a&gt; be complex. I hope that Austral continues to grow and build on its innovations; I hope that future languages continue the example Austral sets and build off of prior research in a way that makes it practically tractable. What’s Austral for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Kindelia&#x2F;Kind&quot;&gt;dependent types&lt;&#x2F;a&gt;? &lt;a href=&quot;https:&#x2F;&#x2F;futhark-lang.org&#x2F;&quot;&gt;Automatic parallelization&lt;&#x2F;a&gt;? &lt;a href=&quot;https:&#x2F;&#x2F;www.unison-lang.org&#x2F;&quot;&gt;Distributed computing&lt;&#x2F;a&gt;? Time will tell.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
